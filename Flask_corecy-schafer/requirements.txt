to generate secrets key from flask folder terminal
(venv) raj.kumar@RAJKUM-BLRM20 Flask_corecy-schafer % python3
Python 3.8.4 (v3.8.4:dfa645a65e, Jul 13 2020, 10:45:06) 
[Clang 6.0 (clang-600.0.57)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> import secrets
>>> secrets.token_hex(16)
'263426d7e225cc6e418474c31d40e0cd'

#########---------------Adding values in table in DB

(venv) raj.kumar@RAJKUM-BLRM20 Flask_corecy-schafer % python3
Python 3.8.4 (v3.8.4:dfa645a65e, Jul 13 2020, 10:45:06) 
[Clang 6.0 (clang-600.0.57)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> from flaskblog import db
/Users/raj.kumar/Desktop/pythonProject1/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:833: FSADeprecationWarning: SQLALCHEMY_TRACK_MODIFICATIONS adds significant overhead and will be disabled by default in the future.  Set it to True or False to suppress this warning.
  warnings.warn(FSADeprecationWarning(
>>> db.create_all()
>>> from flaskblog import User,Post
>>> user1=User(username="raj",email="raj.k@gmail.com",password="password")
>>> user2=User(username="pawan",email="pawan.k@gmail.com",password="pawan1")
>>> db.session.add(user1)
>>> db.session.add(user2)

>>> User.query.first()
User('raj', 'raj.k@gmail.com', 'default.jpg')
>>> User.query.filter_by(username="pawan").all()
[User('pawan', 'pawan.k@gmail.com', 'default.jpg')]
>>> User.query.filter_by(username="pawan").first()
User('pawan', 'pawan.k@gmail.com', 'default.jpg')
>>> user=User.query.filter_by(username="pawan").first()
>>> user.id
2
>>> post_1=Post(title="Blog 1',content='First Post Content!',user_id=user.id)
  File "<stdin>", line 1
    post_1=Post(title="Blog 1',content='First Post Content!',user_id=user.id)
                                                                            ^
SyntaxError: EOL while scanning string literal
>>> user.posts
[]
>>> post_1=Post(title="Blog 1",content='First Post Content!',user_id=user.id)
>>> user=User.query.filter_by(username='raj').first()
>>> user.id
1
>>> post_2=Post(title="Blog 2",content='second Post Content!',user_id=user.id)
>>>

>>> user11=User.query.get(1)
>>> user.posts
[]
db.session.add(post_1)
>>> db.session.add(post_2)
>>> db.session.commit
<bound method instrument.<locals>.do of <sqlalchemy.orm.scoping.scoped_session object at 0x7fb9b6d358b0>>
>>> db.session.commit()
>>> user.posts
[Post('Blog 2', '2021-03-21 16:36:18.032200')]
>>> for post in user.posts:
... print(post.title)
  File "<stdin>", line 2
    print(post.title)
    ^
IndentationError: expected an indented block
>>> for post in user.posts:
...     print(post.title)
...   print(post.title)
  File "<stdin>", line 3
    print(post.title)
                    ^
IndentationError: unindent does not match any outer indentation level
>>>   print(post.title)
  File "<stdin>", line 1
    print(post.title)
    ^
IndentationError: unexpected indent
>>> for post in user.posts:
...    print(post.title)
...
Blog 2
>>> post=Post.query.first()
>>> post
Post('Blog 1', '2021-03-21 16:36:18.027966')
>>> post.author
User('pawan', 'pawan.k@gmail.com', 'default.jpg')
>>>

>>>db.drop_all()
>>from flaskblog import db
>>from flaskblog.models import User


pip install flask-wtf   #for user forms
pip install email-validator
pip install bycrypt
pip install flask-login